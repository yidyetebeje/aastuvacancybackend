datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  APPLICANT
  OFFICE
  PANELIST
  CHAIR
}
enum Status {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  COMPLETED
}
enum LEVEL {
  LOW
  MIDDLE
}
model Position {
  id       String   @id @map("_id") @default(uuid())
  name      String
  vacancy  Vacancy[]
  level     LEVEL
  description String
  requirement String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}
model User {
  id       String   @id @map("_id") @default(uuid())
  name    String?
  email    String   @unique
  password String?
  role     Role    @default(APPLICANT)
  university_id String?
  department String?
  Application Application[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  office   Office?
}

model Application {
  id       String   @id @map("_id") @default(uuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  vacancy  Vacancy  @relation(fields: [vacancyId], references: [id])
  vacancyId String
  academicRank String
  workExperience Int
  teachingExperience Int
  KPI Int
  no_project Int?
  no_publication Int?
  academicRankDocument String?
  workExperienceDocument String?
  teachingExperienceDocument String?
  KPIDocument String?
  strategicPlanDocument String?
  researchExperience RESEARCH_EXPERIENCE_TYPE
  researchExperienceDocument String?
  status   Status @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}
enum RESEARCH_EXPERIENCE_TYPE {
  PROJECT
  PUBLICATION
}
model Vacancy {
  id       String   @id @map("_id") @default(uuid())
  name     String
  description String
  extended Boolean
  position Position @relation(fields: [positionId], references: [id])
  positionId String
  createdAt DateTime @default(now())
  application Application[]
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}


model Office {
  id       String   @id @map("_id") @default(uuid())
  name     String  @unique
  user     User     @relation(fields: [userId], references: [id])
  userId   String @unique
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}